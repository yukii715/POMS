package com.owsb.poms.ui.admin.Inventory;

import com.owsb.poms.system.model.Item;
import com.owsb.poms.system.model.StockUpdateReport;
import com.owsb.poms.ui.admin.AdminDashboard;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.table.*;

public class UpdateStock extends javax.swing.JDialog {
    private AdminDashboard parent;
    private boolean[] closed = {true, true};
    private List<Item> itemList;
    private DefaultTableModel itemsModel = new DefaultTableModel(){
       public boolean isCellEditable(int row, int column){
           return column == 5;
       } 
    } ;
    private String[] itemsColumnName = {"ID", "Category", "Type", "Name", "Stock", "Quantity", "New"};

    public UpdateStock(AdminDashboard parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.parent = parent;
        
        setTitle("Update Stock");
        Items();
        
        closed[0] = false;
        
        this.addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent e) {
            closed[0] = true;
            if (closed[0] && closed[1]) parent.setEnabled(true);
        }

        public void windowClosed(WindowEvent e) {
            closed[0] = true;
            if (closed[0] && closed[1]) parent.setEnabled(true);
        }
    });
    }
    
    private void Items(){
        itemsModel.setRowCount(0);
        
        itemsModel.setColumnIdentifiers(itemsColumnName);
        JTableHeader header = tblItems.getTableHeader();
        header.setBackground(new java.awt.Color(255, 255, 204));
        
        itemsModel.addTableModelListener(e -> {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int col = e.getColumn();

                    if (col == 5){
                        int quantity;
                        int stock = Integer.parseInt(itemsModel.getValueAt(row, 4).toString());
                        try{
                            quantity = Integer.parseInt(itemsModel.getValueAt(row, col).toString());
                            if (quantity > 0) {
                                itemsModel.setValueAt(stock + quantity, row, 6);
                            } else {
                                itemsModel.setValueAt("Invalid", row, 6);
                            }
                        } catch (NumberFormatException ex){
                            if (itemsModel.getValueAt(row, 5).toString().isBlank()){
                                itemsModel.setValueAt(stock, row, 6);
                                return;
                            }
                            itemsModel.setValueAt("Error", row, 6);
                        }
                    }
                    
                }
            });
        
        srlItems.getViewport().setBackground(new java.awt.Color(255, 255, 204));
        
        tblItems.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblItems.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblItems.getColumnModel().getColumn(2).setPreferredWidth(150);
        tblItems.getColumnModel().getColumn(3).setPreferredWidth(220);
        
        itemList = Item.toList();
        
        for (Item item : itemList) {
            if (item.getStatus() != Item.Status.REMOVED)
            {
                itemsModel.addRow(new String[]{
                    item.getItemID(),
                    item.getItemCategory(),
                    item.getItemType(),
                    item.getItemName(),
                    String.valueOf(item.getStock()),
                    "",
                    String.valueOf(item.getStock())
                });
            }
        }
        
        // Create a single “center” renderer:
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Apply it as the default for any Object‐typed cell:
        tblItems.setDefaultRenderer(Object.class, centerRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        srlItems = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnPO = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMain.setBackground(new java.awt.Color(255, 204, 204));

        tblItems.setBackground(new java.awt.Color(255, 255, 204));
        tblItems.setForeground(new java.awt.Color(0, 0, 0));
        tblItems.setModel(itemsModel);
        tblItems.setGridColor(java.awt.Color.gray);
        tblItems.setRowSelectionAllowed(false);
        tblItems.setSelectionBackground(new java.awt.Color(255, 153, 153));
        tblItems.setShowGrid(true);
        srlItems.setViewportView(tblItems);

        btnSave.setBackground(new java.awt.Color(255, 153, 0));
        btnSave.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(252, 251, 249));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnPO.setBackground(new java.awt.Color(255, 153, 0));
        btnPO.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        btnPO.setForeground(new java.awt.Color(252, 251, 249));
        btnPO.setText("PO");
        btnPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap(179, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                .addComponent(btnPO, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(srlItems, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(550, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPO, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(srlItems, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(58, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        boolean allQuantityEmpty = true;
        for (int row = 0; row < tblItems.getRowCount(); row++) {
            Object value = itemsModel.getValueAt(row, 5); 
            if (value != null && !value.toString().isBlank()) {
                allQuantityEmpty = false;
                break;
            }
        }

        if (allQuantityEmpty) {
            JOptionPane.showMessageDialog(this, "No quantity entered!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        for (int i = 0; i < tblItems.getRowCount(); i++){
            if (itemsModel.getValueAt(i, 6).toString().equals("Error") ||
                itemsModel.getValueAt(i, 6).toString().equals("Invalid")){
                JOptionPane.showMessageDialog(this, "Invalid Quantity Found!", "Error", JOptionPane.ERROR_MESSAGE);
                return; 
            }
        }
        
        int result = JOptionPane.showConfirmDialog(this, "Are you sure to make this update?", "Update Stock", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION){
            
            List <StockUpdateReport> list = new ArrayList<>();
            
            for (int i = 0; i < tblItems.getRowCount(); i++){
                for (Item item : itemList){
                    if (itemsModel.getValueAt(i, 0).toString().equals(item.getItemID())){
                        item.setStock(Integer.parseInt(itemsModel.getValueAt(i, 6).toString()));
                        String quantityString = itemsModel.getValueAt(i, 5).toString();
                        int quantity = quantityString.isBlank() ? 0 : Integer.parseInt(quantityString);
                        list.add(new StockUpdateReport(item.getItemID(), item.getItemCategory(), item.getItemType(), item.getItemName(), item.getStock(), quantity));
                    }
                }
            }
            
            new Item().saveToFile(itemList);
            new StockUpdateReport().save(list, "Stock Increasing");
            JOptionPane.showMessageDialog(this, "Stock has updated successfully!");
            parent.Reload();
            parent.toFront();
            dispose();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPOActionPerformed
        ViewPO viewPO = new ViewPO(this, false);
        viewPO.setLocationRelativeTo(this);
        closed[1] = false;
        viewPO.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                closed[1] = true;
                if (closed[0] && closed[1]) parent.setEnabled(true);
            }

            public void windowClosed(WindowEvent e) {
                closed[1] = true;
                if (closed[0] && closed[1]) parent.setEnabled(true);
            }
        });

        viewPO.setVisible(true);
        viewPO.toFront(); 
        viewPO.setAlwaysOnTop(true);
    }//GEN-LAST:event_btnPOActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPO;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane srlItems;
    private javax.swing.JTable tblItems;
    // End of variables declaration//GEN-END:variables
}
