
package com.owsb.poms.ui.pm;

import com.owsb.poms.system.model.*;
import com.owsb.poms.system.model.User.PurchaseManager;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.*;

public class PurchaseOrderCreationTest extends javax.swing.JFrame {
    private PurchaseOrder po;
    private PurchaseManager purchaseManager;
    private List<PurchaseOrder> PoList;
    private List<PurchaseRequisition> prList;
    
    
    private String[] columnName = {"Purchase Order ID","Purchase Requisition ID", "Total Price","Supplier ID", "Date & Time of generated","Delivery Date", "status", "Created By"};
    private DefaultTableModel poTable = new DefaultTableModel(){
       public boolean isCellEditable(int row, int column){
           return false;
       } 
    } ;    
    
    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    
    private void loadPurchaseOrder(){
        poTable.setColumnIdentifiers(columnName);
        poTable.setRowCount(0);

    PoList = POItem.toList();

        for (PurchaseOrder poItem : PoList) {
            poTable.addRow(new String[]{
                poItem.getPOID(),
                poItem.getPRID(),
                String.format("%.2f", poItem.getTotalPrice()),
                poItem.getSupplierID(),
                poItem.getGeneratedDateTime().format(dateTimeFormatter),
                poItem.getDeliveryDate().format(dateFormatter),
                poItem.getStatus().name(),
                poItem.getCreateBy(),
            });
        }
    }
   
    public PurchaseOrderCreationTest(java.awt.Frame parent, PurchaseManager purchaseManager) {
        setTitle("Purchase Order Action Page");
        setSize(400, 300); 
        initComponents();
        this.purchaseManager = purchaseManager;
        this.po = po;
        loadPurchaseOrder();
        new javax.swing.Timer(10000,e -> loadPurchaseOrder()).start();

        if (tblPO.getRowSorter() == null) {
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblPO.getModel());
            tblPO.setRowSorter(sorter);
        }
        if (!checkAll.isSelected()) {
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) tblPO.getRowSorter();
        RowFilter<TableModel, Integer> filter = new RowFilter<TableModel, Integer>() {
            @Override
            public boolean include(RowFilter.Entry<? extends TableModel, ? extends Integer> entry) {
                String status = entry.getStringValue(6);
                if (status == null) return true;
                status = status.trim().toUpperCase();                
                return !(status.equals("DELETED") || status.equals("REJECTED")|| status.equals("INVALID")|| status.equals("CANCELLED")|| status.equals("INVALID"));            
            }
        };
        sorter.setRowFilter(filter);
        } else {
            // Show all rows if checkbox is selected on load
            ((TableRowSorter<TableModel>) tblPO.getRowSorter()).setRowFilter(null);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPO = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnArrive = new javax.swing.JButton();
        checkAll = new javax.swing.JCheckBox();
        btnProcessing = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCreate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnCreate.setText("Create");
        btnCreate.setMaximumSize(new java.awt.Dimension(100, 50));
        btnCreate.setPreferredSize(new java.awt.Dimension(100, 25));
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        tblPO.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tblPO.setModel(poTable);
        tblPO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPOMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPO);

        btnCancel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setMaximumSize(new java.awt.Dimension(100, 25));
        btnCancel.setPreferredSize(new java.awt.Dimension(100, 25));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setMaximumSize(new java.awt.Dimension(100, 25));
        btnDelete.setPreferredSize(new java.awt.Dimension(100, 25));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setMaximumSize(new java.awt.Dimension(100, 25));
        btnEdit.setPreferredSize(new java.awt.Dimension(100, 25));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jButton3.setText("Return");
        jButton3.setMaximumSize(new java.awt.Dimension(100, 25));
        jButton3.setPreferredSize(new java.awt.Dimension(100, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jButton4.setText("Extend");
        jButton4.setMaximumSize(new java.awt.Dimension(100, 25));
        jButton4.setPreferredSize(new java.awt.Dimension(100, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnArrive.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnArrive.setText("Arrived");
        btnArrive.setMaximumSize(new java.awt.Dimension(100, 25));
        btnArrive.setPreferredSize(new java.awt.Dimension(100, 25));
        btnArrive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArriveActionPerformed(evt);
            }
        });

        checkAll.setText("View All");
        checkAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllActionPerformed(evt);
            }
        });

        btnProcessing.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnProcessing.setText("Processing");
        btnProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessingActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(180, 180, 180)
                                        .addComponent(btnArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(182, 182, 182)
                                        .addComponent(btnProcessing)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRefresh)
                                        .addGap(127, 127, 127))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(253, 253, 253)
                                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(197, 197, 197)
                                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE))))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(checkAll, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkAll)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcessing)
                    .addComponent(btnRefresh))
                .addGap(34, 34, 34)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        POCreate create = new POCreate(this, purchaseManager);
        create.setVisible(true);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void tblPOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPOMouseClicked
    if (evt.getClickCount() == 2 && tblPO.getSelectedRow() != -1) {
            int row = tblPO.getSelectedRow();
            
            PurchaseOrder po = PurchaseOrder.getPoById(String.valueOf(tblPO.getValueAt(row, 0)));
        PurchaseRequisition pr = PurchaseRequisition.getPrById(po.getPRID());
        
            POItemDetails pod = new POItemDetails(po, pr);
            pod.setLocationRelativeTo(this);
            pod.setVisible(true);
            loadPurchaseOrder();
        }
    }//GEN-LAST:event_tblPOMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblPO.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a purchase order to delete.", 
            "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    String poID = ((String) poTable.getValueAt(selectedRow, 0)).trim(); // Get PR ID from first column
    String currentStatus = ((String) poTable.getValueAt(selectedRow, 6)).trim(); // Get current status
    
    if ("REJECTED".equalsIgnoreCase(currentStatus) || "DELETED".equalsIgnoreCase(currentStatus)) {
    JOptionPane.showMessageDialog(this, "You cannot append said Purchase order.", 
        "Denied", JOptionPane.INFORMATION_MESSAGE);
    return;
}

    
    int response = JOptionPane.showConfirmDialog(this, 
        "Delete " + poID + "?", 
        "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (response == JOptionPane.YES_OPTION) {
        try {
            // Find the selected PR in the list
            for (PurchaseOrder po : PoList) {
                if (po.getPOID().equals(poID)) {
                    // Update the status using your existing methods
                    po.setStatus(PurchaseOrder.Status.DELETED);
                    po.updateStatus();
                    break;
                }
            }
            
            // Refresh the table
            loadPurchaseOrder();
            
            JOptionPane.showMessageDialog(this, "Purchase Order " + poID + " has been deleted.", 
                "DELETED", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error deleting purchase order: " + ex.getMessage(), 
                "Deletion Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void checkAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllActionPerformed
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) tblPO.getRowSorter();
    if (sorter == null) {
        sorter = new TableRowSorter<>(tblPO.getModel());
        tblPO.setRowSorter(sorter);
    }

    if (checkAll.isSelected()) {
        // Show all rows
        sorter.setRowFilter(null);
    } else {
        // Filter out rows with status "DELETED" in column 6
        RowFilter<TableModel, Integer> filter = new RowFilter<TableModel, Integer>() {
            @Override
            public boolean include(RowFilter.Entry<? extends TableModel, ? extends Integer> entry) {
                String status = entry.getStringValue(6); // column 6 for status
                if (status == null) return true;
                status = status.trim().toUpperCase();
                return !(status.equals("DELETED") || status.equals("REJECTED")|| status.equals("CANCELLED")|| status.equals("INVALID"));  
            }
        };
        sorter.setRowFilter(filter);
    }
    }//GEN-LAST:event_checkAllActionPerformed

    private void btnArriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArriveActionPerformed
        int selectedRow = tblPO.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a purchase order to obtain.", 
            "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    String poID = ((String) poTable.getValueAt(selectedRow, 0)).trim(); // Get PR ID from first column
    String currentStatus = ((String) poTable.getValueAt(selectedRow, 6)).trim(); // Get current status
    
    // Check if already approved
    if ("ARRIVED".equalsIgnoreCase(currentStatus)) {
        JOptionPane.showMessageDialog(this, "This purchase order has already arrived.", 
            "Already Approved", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    
    if ("REJECTED".equalsIgnoreCase(currentStatus) || "DELETED".equalsIgnoreCase(currentStatus)|| "CANCELLED".equalsIgnoreCase(currentStatus)) {
    JOptionPane.showMessageDialog(this, "You cannot append said Purchase order.", 
        "Denied", JOptionPane.INFORMATION_MESSAGE);
    return;
}

    
    int response = JOptionPane.showConfirmDialog(this, 
        "Has the purchase order " + poID + " arrived?", 
        "Confirm Arrival", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (response == JOptionPane.YES_OPTION) {
        try {
            // Find the selected PR in the list
            for (PurchaseOrder po : PoList) {
                if (po.getPOID().equals(poID)) {
                    // Update the status using your existing methods
                    po.setStatus(PurchaseOrder.Status.ARRIVED);
                    po.updateStatus();
                    break;
                }
            }
            
            // Refresh the table
            loadPurchaseOrder();
            
            JOptionPane.showMessageDialog(this, "Purchase Order " + poID + " has arrived.", 
                "Arrived", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error receiving purchase order: " + ex.getMessage(), 
                "Arrival Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnArriveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        POEditor editor = new POEditor();
        editor.setVisible(true);
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedRow = tblPO.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a purchase order to cancel.", 
            "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    String poID = ((String) poTable.getValueAt(selectedRow, 0)).trim(); // Get PR ID from first column
    String currentStatus = ((String) poTable.getValueAt(selectedRow, 6)).trim(); // Get current status
    
    // Check if already approved
    if ("CANCELLED".equalsIgnoreCase(currentStatus)) {
        JOptionPane.showMessageDialog(this, "This purchase order has already cancelled.", 
            "Already Cancelled", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    
    if ("REJECTED".equalsIgnoreCase(currentStatus) || "DELETED".equalsIgnoreCase(currentStatus)) {
    JOptionPane.showMessageDialog(this, "You cannot append said Purchase order.", 
        "Denied", JOptionPane.INFORMATION_MESSAGE);
    return;
}

    
    int response = JOptionPane.showConfirmDialog(this, 
        "Cancel " + poID + "?", 
        "Confirm cancellation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (response == JOptionPane.YES_OPTION) {
        try {
            // Find the selected PR in the list
            for (PurchaseOrder po : PoList) {
                if (po.getPOID().equals(poID)) {
                    // Update the status using your existing methods
                    po.setStatus(PurchaseOrder.Status.CANCELLED);
                    po.updateStatus();
                    
                     String relatedPrID = po.getPRID(); // get related PR ID
            
            // Read all purchase requisitions from the PR text file into a list
            List<PurchaseRequisition> prList = PurchaseRequisition.toList();

            for (PurchaseRequisition pr : prList) {
                if (pr.getPRID().equals(relatedPrID)) {
                    pr.setStatus(PurchaseRequisition.Status.DELETED);
                    break;
                    }
                }
            if (!prList.isEmpty()) {
                prList.get(0).saveToFile(prList);
            }
                    break;
                }
            }
            
            // Refresh the table
            loadPurchaseOrder();
            
            JOptionPane.showMessageDialog(this, "Purchase Order " + poID + " has been cancelled.", 
                "Arrived", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error cancelling purchase order: " + ex.getMessage(), 
                "Cancellation Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        POExtend extend = new POExtend();
        extend.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadPurchaseOrder();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnProcessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessingActionPerformed
        int selectedRow = tblPO.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a purchase order to obtain.", 
            "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    String poID = ((String) poTable.getValueAt(selectedRow, 0)).trim(); // Get PR ID from first column
    String currentStatus = ((String) poTable.getValueAt(selectedRow, 6)).trim(); // Get current status
    
    // Check if already approved
    if ("PROCESSING".equalsIgnoreCase(currentStatus)) {
        JOptionPane.showMessageDialog(this, "This purchase order is already processing.", 
            "Already processing", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    
    if ("REJECTED".equalsIgnoreCase(currentStatus) || "DELETED".equalsIgnoreCase(currentStatus) || "CANCELLED".equalsIgnoreCase(currentStatus)) {
    JOptionPane.showMessageDialog(this, "You cannot append said Purchase order.", 
        "Denied", JOptionPane.INFORMATION_MESSAGE);
    return;
}

    
    int response = JOptionPane.showConfirmDialog(this, 
        "Process " + poID + " ?", 
        "Confirm processing", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (response == JOptionPane.YES_OPTION) {
        try {
            // Find the selected PR in the list
            for (PurchaseOrder po : PoList) {
                if (po.getPOID().equals(poID)) {
                    // Update the status using your existing methods
                    po.setStatus(PurchaseOrder.Status.PROCESSING);
                    po.updateStatus();
                    break;
                }
            }
            
            // Refresh the table
            loadPurchaseOrder();
            
            JOptionPane.showMessageDialog(this, "Purchase Order " + poID + " is processing.", 
                "Process", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error processing purchase order: " + ex.getMessage(), 
                "Processing Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnProcessingActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PurchaseOrderCreationTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PurchaseOrderCreationTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PurchaseOrderCreationTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PurchaseOrderCreationTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PurchaseOrderCreationTest().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArrive;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnProcessing;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JCheckBox checkAll;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPO;
    // End of variables declaration//GEN-END:variables
}
