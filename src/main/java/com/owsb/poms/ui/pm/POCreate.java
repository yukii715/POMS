package com.owsb.poms.ui.pm;

import com.owsb.poms.system.functions.DateResolver;
import javax.swing.table.DefaultTableModel;
import com.owsb.poms.system.model.*;
import com.owsb.poms.system.model.User.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.table.*;

public class POCreate extends javax.swing.JFrame {
    private PurchaseManager purchaseManager;
    private LocalDate deliveryDate;
    private double totalPrice;
    private List<Item> items;
    private List<POItem> orderItems = new ArrayList<>();
    private PurchaseRequisition pr;
    private PurchaseOrder po;
    private boolean edit = false;
    private boolean isInitializing = false;
    private boolean isFilling = false; // prevent action performed when add items
    

        
    private DefaultTableModel itemsModel = new DefaultTableModel(){
        public boolean isCellEditable(int row, int column){
            return column == 6 || column == 7;
        } 
    } ;

    private String[] itemsColumnName = {"Item ID", "Category", "Type", "Name", "Stock", "Status", "Quantity", "Unit Price"};

   
    
    public POCreate(java.awt.Frame parent, PurchaseManager purchaseManager) {
        setTitle("Purchase Order Creation");
        setSize(400, 300); 
    initComponents();
    
    initialSetting();
    this.purchaseManager = purchaseManager;
    purchaseManager.getUID();
    isFilling = false;
    cmbYear.setEnabled(false);
    cmbMonth.setEnabled(false);
    cmbDay.setEnabled(false);
        
    cmbPRID.setSelectedIndex(-1);
    cmbYear.setSelectedIndex(-1);
    cmbMonth.setSelectedIndex(-1);
    cmbDay.setSelectedIndex(-1);
        
    refreshItem();
    }
    
    

    
    private void initialSetting(){
        isFilling = true;
        cmbPRID.removeAllItems();
        var prs = PurchaseRequisition.getAllPRs();
        for (String prid : prs) {
            if(PurchaseRequisition.getPrById(prid).getStatus() == PurchaseRequisition.Status.APPROVED)
            {
                cmbPRID.addItem(prid);
            }
        }
        
    }
    
    private void refreshItem(){
    itemsModel.setRowCount(0);
    itemsModel.setColumnIdentifiers(itemsColumnName);

    if (cmbPRID.getSelectedIndex() != -1){
            if (!edit)
            {
                var pri = pr.getItems();
                if (pri == null) return;
                items = Item.getItemsFromPR(pri);

                Map<String, PRItem> priMap = pri.stream().collect(Collectors.toMap(PRItem::getItemID, Function.identity()));

                for (Item item : items) {
                    if (item.getStatus() != Item.Status.REMOVED)
                    {
                        PRItem prItem = priMap.get(item.getItemID());

                        itemsModel.addRow(new String[]{
                            item.getItemID(),
                            item.getItemCategory(),
                            item.getItemType(),
                            item.getItemName(),
                            String.valueOf(item.getStock()),
                            item.getStatus().name(),
                            String.valueOf(prItem.getQuantity()),
                            ""
                        });
                    }
                }
            }
            else{
                var pro = po.getItems();
                items = Item.getItemsFromPO(pro);

                Map<String, POItem> proMap = pro.stream().collect(Collectors.toMap(POItem::getItemID, Function.identity()));

                for (Item item : items) {
                    if (item.getStatus() != Item.Status.REMOVED)
                    {
                        POItem poItem = proMap.get(item.getItemID());

                        itemsModel.addRow(new String[]{
                            item.getItemID(),
                            item.getItemCategory(),
                            item.getItemType(),
                            item.getItemName(),
                            String.valueOf(item.getStock()),
                            item.getStatus().name(),
                            String.valueOf(poItem.getQuantity()),
                            String.format("%.2f", poItem.getUnitPrice())
                        });
                    }
                }
            }
        }

    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
    tblItems.setDefaultRenderer(Object.class, centerRenderer);
}


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConfirm = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        btnReturn = new javax.swing.JButton();
        cmbPRID = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        cmbYear = new javax.swing.JComboBox<>();
        cmbMonth = new javax.swing.JComboBox<>();
        cmbDay = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRemark = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnConfirm.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        tblItems.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tblItems.setModel(itemsModel);
        jScrollPane1.setViewportView(tblItems);

        btnReturn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        cmbPRID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        cmbPRID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPRID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPRIDActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setText("Delivery Date: ");

        cmbYear.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        cmbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearActionPerformed(evt);
            }
        });

        cmbMonth.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthActionPerformed(evt);
            }
        });

        cmbDay.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        cmbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDayActionPerformed(evt);
            }
        });

        txtRemark.setColumns(20);
        txtRemark.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtRemark.setRows(5);
        jScrollPane2.setViewportView(txtRemark);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setText("Remark:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbPRID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConfirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReturn)
                        .addGap(25, 25, 25))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPRID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnReturn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPRIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPRIDActionPerformed
    if (isFilling) return;
        if (cmbPRID.getSelectedIndex() >= 0){
            pr = PurchaseRequisition.getPrById(cmbPRID.getSelectedItem().toString());

            cmbYear.setEnabled(true);
            
            isInitializing = true;
            
            DateResolver.connect(cmbYear, cmbMonth, cmbDay, isInitializing);
            
            deliveryDate = edit ? po.getDeliveryDate() : pr.getRequiredDeliveryDate();
            cmbYear.setSelectedItem(String.valueOf(deliveryDate.getYear()));
            cmbMonth.setSelectedItem(String.format("%02d", deliveryDate.getMonthValue()));
            cmbDay.setSelectedItem(String.format("%02d", deliveryDate.getDayOfMonth()));

            isInitializing = false;
            
            refreshItem();
        }
        else{
            refreshItem();
        }
    }//GEN-LAST:event_cmbPRIDActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
            // Validate inputs
        if (cmbPRID.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a PR!", "PR Missing", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbDay.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Invalid delivery date!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Clear and recalculate order items
        orderItems.clear();
        totalPrice = 0;

        // Validate table data
        for (int i = 0; i < tblItems.getRowCount(); i++) {
            // Parse quantity (must be positive integer)
            int quantity;
            try {
                quantity = Integer.parseInt(tblItems.getValueAt(i, 6).toString().trim());
                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity must be > 0!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid quantity (must be a number)!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Parse unit price (must be positive)
            double unitPrice;
            try {
                unitPrice = Double.parseDouble(tblItems.getValueAt(i, 7).toString().trim());
                if (unitPrice <= 0) {
                    JOptionPane.showMessageDialog(this, "Price must be > 0!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid price (must be a number)!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Add validated item to order
            POItem item = new POItem(
                tblItems.getValueAt(i, 0).toString(),  // Item ID
                tblItems.getValueAt(i, 1).toString(),  // Name
                tblItems.getValueAt(i, 2).toString(),  // Description
                tblItems.getValueAt(i, 3).toString()   // Category
            );
            item.setQuantity(quantity);
            item.setUnitPrice(unitPrice);
            orderItems.add(item);
            totalPrice += quantity * unitPrice;
        }

        // Build confirmation message
        String itemsList = orderItems.stream()
            .map(item -> String.format(
                "- %s (Qty: %d, Price: RM %.2f)", 
                item.getItemName(), 
                item.getQuantity(), 
                item.getUnitPrice()
            ))
            .collect(Collectors.joining("\n"));

        String confirmationMessage = String.format(
            "Create new Purchase Order?\n\n" +
            "PR ID: %s\n" +
            "Supplier: %s\n" +
            "Delivery Date: %s\n" +
            "Total Price: RM %.2f\n\n" +
            "Items:\n%s",
            cmbPRID.getSelectedItem().toString(),
            pr.getSupplierID(),
            deliveryDate.format(DateTimeFormatter.ofPattern("dd MMM yyyy")),
            totalPrice,
            itemsList
        );

        // Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this,
            confirmationMessage,
            "Confirm Purchase Order",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        // If user confirms, save the PO
        if (confirm == JOptionPane.YES_OPTION) {
            String remark = txtRemark.getText().isBlank() ? "None" : txtRemark.getText().trim();

            // Create and save the PO
            po = new PurchaseOrder(pr.getPRID(), totalPrice, pr.getSupplierID(), deliveryDate, purchaseManager.getUID(), remark);
            po.add();

            // Save PO items
            POItem poi = new POItem();
            poi.setPOID(po.getPOID());
            poi.save(orderItems);

            // Update PR status
            pr.setStatus(PurchaseRequisition.Status.POGENERATED);
            pr.updateStatus();

            JOptionPane.showMessageDialog(this, "PO created successfully!");
            this.dispose();
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void cmbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearActionPerformed
        if (isInitializing || isFilling) return;
        
        cmbMonth.setSelectedIndex(-1);
        
        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();
        
        cmbMonth.removeAllItems();
        
        isFilling = true;
        DateResolver.populateCbMonth(cmbYear, cmbMonth, cmbDay, currentYear, currentMonth);
        cmbMonth.setSelectedIndex(-1);
        isFilling = false;
    }//GEN-LAST:event_cmbYearActionPerformed

    private void cmbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthActionPerformed
        if (isInitializing || isFilling) return;
        
        cmbDay.setSelectedIndex(-1);        
        
        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();
        int currentDay = today.getDayOfMonth();
        
        cmbDay.removeAllItems();
        
        isFilling = true;
        DateResolver.populateCbDay(cmbYear, cmbMonth, cmbDay, currentYear, currentMonth, currentDay);
        cmbDay.setSelectedIndex(-1);
        isFilling = false;
    }//GEN-LAST:event_cmbMonthActionPerformed

    private void cmbDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDayActionPerformed
        if (cmbDay.getSelectedIndex() != -1)
        {
            int year = Integer.parseInt(cmbYear.getSelectedItem().toString());
            int month = Integer.parseInt(cmbMonth.getSelectedItem().toString());
            int day = Integer.parseInt(cmbDay.getSelectedItem().toString());
            deliveryDate = LocalDate.of(year, month, day);
        }
    }//GEN-LAST:event_cmbDayActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(POCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(POCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(POCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(POCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new POCreate().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnReturn;
    private javax.swing.JComboBox<String> cmbDay;
    private javax.swing.JComboBox<String> cmbMonth;
    private javax.swing.JComboBox<String> cmbPRID;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblItems;
    private javax.swing.JTextArea txtRemark;
    // End of variables declaration//GEN-END:variables
}
